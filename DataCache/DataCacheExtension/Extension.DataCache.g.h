// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.240405.15

#pragma once
#include "winrt/Extension.h"
namespace winrt::Extension::implementation
{
    template <typename D, typename... I>
    struct WINRT_IMPL_EMPTY_BASES DataCache_base : implements<D, Extension::DataCache, I...>
    {
        using base_type = DataCache_base;
        using class_type = Extension::DataCache;
        using implements_type = typename DataCache_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"Extension.DataCache";
        }
    };
}
namespace winrt::Extension::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_IMPL_EMPTY_BASES DataCacheT : implements<D, winrt::Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = Extension::DataCache;

        hstring GetRuntimeClassName() const
        {
            return L"Extension.DataCache";
        }
        auto ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_DATACACHE_XAML_G_H) || __has_include("Extension.DataCache.xaml.g.h")

#include "Extension.DataCache.xaml.g.h"

#else

namespace winrt::Extension::implementation
{
    template <typename D, typename... I>
    using DataCacheT = DataCache_base<D, I...>;
}

#endif
